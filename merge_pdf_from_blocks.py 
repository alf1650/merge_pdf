#!/usr/bin/env python3
import os
import re
import json
from PyPDF2 import PdfReader, PdfWriter
from PIL import Image, ImageFile
import io

ImageFile.LOAD_TRUNCATED_IMAGES = True

def extract_block_from_filename(filename):
    match = re.match(r'^(\d{3})', filename)
    return int(match.group(1)) if match else None

def image_to_pdf_page(image_path, width_points, height_points, dpi=150):
    try:
        with Image.open(image_path) as img:
            if img.mode != 'RGB':
                img = img.convert('RGB')
            w_in = width_points / 72.0
            h_in = height_points / 72.0
            w_px = int(w_in * dpi)
            h_px = int(h_in * dpi)
            img.thumbnail((w_px, h_px), Image.Resampling.LANCZOS)
            canvas = Image.new('RGB', (w_px, h_px), (255, 255, 255))
            offset = ((w_px - img.width) // 2, (h_px - img.height) // 2)
            canvas.paste(img, offset)
            pdf_buffer = io.BytesIO()
            canvas.save(pdf_buffer, format='PDF', resolution=dpi)
            pdf_buffer.seek(0)
            reader = PdfReader(pdf_buffer)
            return reader.pages[0]
    except Exception as e:
        print(f"  ⚠️ Skipped image: {os.path.basename(image_path)} | {e}")
        return None

def main():
    input_pdf_dir = "/Users/alfredlim/Redpower/merge_pdf/input"
    image_dir = "/Users/alfredlim/Redpower/merge_pdf/images"
    json_dir = "/Users/alfredlim/Redpower/merge_pdf/ocr"
    output_dir = "/Users/alfredlim/Redpower/merge_pdf/output"
    os.makedirs(output_dir, exist_ok=True)

    pdf_files = [f for f in os.listdir(input_pdf_dir) if f.lower().endswith('.pdf')]
    if not pdf_files:
        print("❌ No PDFs found.")
        return

    # Build image index: {block: [full_paths]} — NO SORTING
    image_files = [f for f in os.listdir(image_dir) if f.lower().endswith(('.jpg', '.jpeg', '.png'))]
    images_by_block = {}
    for img_file in image_files:
        img_path = os.path.join(image_dir, img_file)
        if os.path.getsize(img_path) == 0:
            print(f"⚠️ Skipping empty file: {img_file}")
            continue
        block = extract_block_from_filename(img_file)
        if block is not None:
            images_by_block.setdefault(block, []).append(img_path)
        else:
            print(f"⚠️ Skipping (no block): {img_file}")

    print(f"✅ Loaded {len(image_files)} images for {len(images_by_block)} blocks.")

    # Process each PDF
    for pdf_filename in pdf_files:
        base_name = os.path.splitext(pdf_filename)[0]
        json_path = os.path.join(json_dir, f"{base_name}_blocks.json")
        pdf_path = os.path.join(input_pdf_dir, pdf_filename)
        output_path = os.path.join(output_dir, f"{base_name}_WITH_IMAGES.pdf")

        if not os.path.isfile(json_path):
            print(f"⚠️ Skipping {pdf_filename}: JSON not found")
            continue

        with open(json_path, "r", encoding="utf-8") as f:
            data = json.load(f)

        reader = PdfReader(pdf_path)
        writer = PdfWriter()

        print(f"\n📄 Processing: {pdf_filename}")
        for page_info in data["pages"]:
            idx = page_info["page_index"]
            if idx >= len(reader.pages):
                continue

            blocks = page_info["clean_blocks"]  # ✅ Exact order from JSON
            writer.add_page(reader.pages[idx])
            print(f"  ➕ Page {idx+1}: blocks {blocks}")

            for block in blocks:
                if block in images_by_block:
                    for img_path in images_by_block[block]:  # ✅ No sorting — use as-is
                        print(f"    ➕ Adding: {os.path.basename(img_path)}")
                        pdf_page = image_to_pdf_page(
                            img_path,
                            float(reader.pages[idx].mediabox.width),
                            float(reader.pages[idx].mediabox.height),
                            dpi=150
                        )
                        if pdf_page:
                            writer.add_page(pdf_page)
                else:
                    print(f"    ➖ No images for block {block}")

        with open(output_path, "wb") as f:
            writer.write(f)
        print(f"✅ Output saved: {output_path}")

    print(f"\n🎉 All done! Outputs in: {output_dir}")

if __name__ == "__main__":
    main()